
/*@ <answer>
 *
 * Nombre y Apellidos: DA27 David Ferreras Díaz
 * Nombre y Apellidos: DA58 Alejandro Zamorano Méndez
 *
 *@ </answer> */

#include <iostream>
#include <fstream>
#include <vector>
#include <math.h>
#include <climits>
#include <algorithm>
using namespace std;

#include "Matriz.h"  // propios o los de las estructuras de datos de clase

/*@ <answer>

 Escribe aquí un comentario general sobre la solución, explicando cómo
 se resuelve el problema y cuál es el coste de la solución, en función
 del tamaño del problema.

 El problema consiste en ir calculando el número de combinacioes de monedas posibles cuya suma de la cantidad a pagar.
 El algoritmo empieza calculando la matriz de programacion dinamica, cuyo valor dj[j], donde monedas[i] <= j <= C e 1 <= i < n, es el minimo de monedas necesarias.
 Mientras se calcula, se comprueba si la siguiente combinacion necesita menos monedas o las mismas. Si necesita menos, se resetea a 1 la variable que contiene el numero de formas posibles para dp[j]. 
 Si es igual, se suma uno al contador de numero de combinaciones posibles. 
 Se descartan todos los dj[j] > dj[j - monedas(i)].
 El algoritmo devuelve todas las combinaciones posibles de pagar la cantidad con el menor numero de monedas.

 Al ser descendente, la llamada inicial es dp(1, monedas[i]).
 Caso base: dp[i, i] = INF(Infinito);
 Caso recursivo, i < j:
    dp(i, j) = min{dp[i, j], dp[i, j - monedas] + 1}

 int C: Cantidad a pagar
 int N: Numero de tipos de moneda del sistema monetario
 vector<int> monedas(N): vector de valores de las monedas
 int combinaciones: Variable contador de combinaciones posibles para pagar
 vector<int> dp(C + 1, INF): vector de programacion dinamica

 @ </answer> */


 // ================================================================
 // Escribe el código completo de tu solución aquí debajo
 // ================================================================
 //@ <answer>

const int INF = 100000000;

int min_monedas(vector<int>& monedas, const int C) {
    int n = monedas.size();
    int combinaciones = 0;

    vector<int> dp(C + 1, INF); // Inicializa con valor máximo para representar infinito
    dp[0] = 0; // Caso Base

    for (int i = 1; i < n; ++i) {
        for (int j = monedas[i]; j <= C; ++j) {
            if (dp[j - monedas[i]] != INF) {
                if (dp[j] > dp[j - monedas[i]] + 1) {       // Si es mayor, se actualiza el minimo y se resetea el numero de formas
                    dp[j] = dp[j - monedas[i]] + 1;
                    combinaciones = 1;
                }
                else if (dp[j] == dp[j - monedas[i]] + 1) {     // si son iguales, se le suma una forma mas de conseguir el resultado con el menor numero de monedas
                    combinaciones++;
                }
            }
        }
    }

    return (dp[C] == INF) ? 0 : combinaciones;
}


bool resuelveCaso() {
    int C, N;
    // leer los datos de la entrada
    cin >> C >> N;
    if (!std::cin)
        return false;

    vector<int> monedas(N);
    int moneda;
    for (int i = 0; i < N; ++i) {
        cin >> moneda;
        monedas.push_back(moneda);
    }

    // resolver el caso posiblemente llamando a otras funciones y escribir la solución
    cout << min_monedas(monedas,C) << "\n";

    return true;
}

//@ </answer>
//  Lo que se escriba dejado de esta línea ya no forma parte de la solución.

int main() {
    // ajustes para que cin extraiga directamente de un fichero
#ifndef DOMJUDGE
    std::ifstream in("casos.txt");
    auto cinbuf = std::cin.rdbuf(in.rdbuf());
#endif

    while (resuelveCaso());

    // para dejar todo como estaba al principio
#ifndef DOMJUDGE
    std::cin.rdbuf(cinbuf);
    system("PAUSE");
#endif
    return 0;
}
